{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","contants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobot","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","searchField","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.02236120.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport {connect}  from 'react-redux';\nimport { changeSearchField, requestRobots} from '../action';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nconst mapStateToProp = (state) => {\n  return {\n    searchfield: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  }\n\n}\n\nconst mapDispatchToProp = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(changeSearchField(event.target.value)),\n    onRequestRobot : () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n   this.props.onRequestRobot();\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    const {searchfield, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter( robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProp, mapDispatchToProp)(App);\n//export default App;","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './contants';\r\n\r\nexport const changeSearchField = (text) => ({\r\n type:CHANGE_SEARCH_FIELD,\r\n payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n      .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './contants';\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField : \"\"\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state,{searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots:[],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state,{error: action.payload, isPending:false});\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App'; \nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots });\nconst  store = createStore(rootReducer, applyMiddleware(thunk,logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}